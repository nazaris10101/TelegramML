#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import logging
import os
import subprocess
from pathlib import Path
from datetime import time
from zoneinfo import ZoneInfo

import pandas as pd
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    Application,
)

# ================== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ==================
CSV_PATH = Path("/Users/mihajluknazar/Desktop/btc_7day_forecast.csv")
PNG_PATH = Path("/Users/mihajluknazar/Desktop/btc_7day_forecast.png")
MODEL_SCRIPT = Path("/Users/mihajluknazar/Desktop/ai_crypto.py")
PYTHON_BIN = "/usr/local/bin/python3"          # –Ü–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä, —è–∫–∏–º –≤–∏ –∑–∞–ø—É—Å–∫–∞–ª–∏ –º–æ–¥–µ–ª—å
TZ = ZoneInfo("Europe/Zurich")                 # –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏

logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO
)

# –ü–∞–º‚Äô—è—Ç—å –ø—ñ–¥–ø–∏—Å–æ–∫ (–ø—Ä–æ—Å—Ç–∞ –º–Ω–æ–∂–∏–Ω–∞ —É –ø—Ä–æ—Ü–µ—Å—ñ)
subscribers: set[int] = set()


# ================== –£–¢–ò–õ–Ü–¢–ò ==================
def load_forecast_text(max_days: int = 7) -> str:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CSV –∑ –ø—Ä–æ–≥–Ω–æ–∑–æ–º —Ç–∞ –∑—ñ–±—Ä–∞—Ç–∏ —Ç–µ–∫—Å—Ç."""
    if not CSV_PATH.exists():
        return "‚ùå –§–∞–π–ª –ø—Ä–æ–≥–Ω–æ–∑—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

    try:
        df = pd.read_csv(CSV_PATH)
        # –í–∏–±—ñ—Ä –∫–æ–ª–æ–Ω–∫–∏ –∑ –ø—Ä–æ–≥–Ω–æ–∑–æ–º: —Å–ø–æ—á–∞—Ç–∫—É 'predicted_close_usd', –ø–æ—Ç—ñ–º 'forecast',
        # —ñ –ª–∏—à–µ —è–∫ –∑–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –±–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π —Å—Ç–æ–≤–ø–µ—Ü—å
        if "predicted_close_usd" in df.columns:
            col = "predicted_close_usd"
        elif "forecast" in df.columns:
            col = "forecast"
        else:
            col = df.columns[0]
        vals = df[col].tolist()[:max_days]

        lines = ["üìà –ü—Ä–æ–≥–Ω–æ–∑ —Ü—ñ–Ω–∏ BTC –Ω–∞ 7 –¥–Ω—ñ–≤:"]
        for i, v in enumerate(vals, start=1):
            try:
                lines.append(f"–î–µ–Ω—å {i}: ${float(v):,.2f}")
            except Exception:
                lines.append(f"–î–µ–Ω—å {i}: {v}")
        return "\n".join(lines)
    except Exception as e:
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è CSV: {e}"


async def send_forecast(chat_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ —ñ, —è–∫—â–æ —î, –∫–∞—Ä—Ç–∏–Ω–∫—É."""
    text = load_forecast_text()
    await context.bot.send_message(chat_id=chat_id, text=text)

    if PNG_PATH.exists():
        try:
            with PNG_PATH.open("rb") as f:
                await context.bot.send_photo(
                    chat_id=chat_id, photo=f, caption="–ì—Ä–∞—Ñ—ñ–∫ –ø—Ä–æ–≥–Ω–æ–∑—É (7 –¥–Ω—ñ–≤)"
                )
        except Exception as e:
            await context.bot.send_message(
                chat_id=chat_id, text=f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}"
            )


async def rebuild_forecast() -> tuple[bool, str]:
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–¥–µ–ª—å–Ω–∏–π —Å–∫—Ä–∏–ø—Ç —ñ –¥–æ—á–µ–∫–∞—Ç–∏—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è.
    –ü–æ–≤–µ—Ä—Ç–∞—î (ok, tail_log).
    """
    if not MODEL_SCRIPT.exists():
        return False, f"–°–∫—Ä–∏–ø—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {MODEL_SCRIPT}"

    try:
        def _run():
            return subprocess.run(
                [PYTHON_BIN, str(MODEL_SCRIPT)],
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                check=False,
            )

        result = await asyncio.to_thread(_run)
        ok = (result.returncode == 0)
        # –ü–æ–≤–µ—Ä—Ç–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ ¬´—Ö–≤—ñ—Å—Ç¬ª –ª–æ–≥—É, —â–æ–± –Ω–µ –∑–∞—Å–º—ñ—á—É–≤–∞—Ç–∏ —á–∞—Ç
        return ok, (result.stdout or "")[-2000:]
    except Exception as e:
        return False, f"–í–∏–Ω—è—Ç–æ–∫: {e}"


# ================== –•–ï–ù–î–õ–ï–†–ò –ö–û–ú–ê–ù–î ==================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    subscribers.add(chat_id)
    msg = (
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø NazarPriceBot.\n\n"
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "‚Ä¢ /predict ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ (7 –¥–Ω—ñ–≤)\n"
        "‚Ä¢ /rebuild ‚Äî –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ (–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–¥–µ–ª—å) —ñ –ø–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n"
        "‚Ä¢ /daily_on ‚Äî —â–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –æ 09:00 (Europe/Zurich)\n"
        "‚Ä¢ /daily_off ‚Äî –≤–∏–º–∫–Ω—É—Ç–∏ —â–æ–¥–µ–Ω–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É\n"
    )
    await update.message.reply_text(msg)


async def predict(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await send_forecast(update.effective_chat.id, context)


async def rebuild(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("‚è≥ –ó–∞–ø—É—Å–∫–∞—é –º–æ–¥–µ–ª—å, –∑–∞—á–µ–∫–∞–π‚Ä¶ (~–∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω)")
    ok, tail = await rebuild_forecast()
    if ok:
        await update.message.reply_text("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–æ–±–æ—Ç—É. –ù–∞–¥—Å–∏–ª–∞—é –æ–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑.")
        await send_forecast(update.effective_chat.id, context)
    else:
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–ø—É—Å–∫—É –º–æ–¥–µ–ª—ñ. –õ–æ–≥ –Ω–∏–∂—á–µ:")
        # –í—ñ–¥–ø—Ä–∞–≤–∏–º–æ —è–∫ –ø—Ä–µ—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç (–±–µ–∑ MarkdownV2, —â–æ–± –Ω–µ –µ–∫—Ä–∞–Ω—É–≤–∞—Ç–∏)
        await update.message.reply_text(f"```\n{tail}\n```", parse_mode="Markdown")


async def daily_job(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –≤—Å—ñ–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º."""
    for chat_id in list(subscribers):
        try:
            await send_forecast(chat_id, context)
        except Exception as e:
            logging.warning(f"–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥–æ {chat_id} –Ω–µ –≤–¥–∞–ª–æ—Å—è: {e}")


async def daily_on(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–≤—ñ–º–∫–Ω—É—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É —â–æ–¥–µ–Ω–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É 09:00 Europe/Zurich."""
    chat_id = update.effective_chat.id
    subscribers.add(chat_id)

    # –ü—Ä–∏–±—Ä–∞—Ç–∏ –º–æ–∂–ª–∏–≤—ñ –¥—É–±–ª—ñ–∫–∞—Ç–∏ job—ñ–≤
    for job in context.job_queue.get_jobs_by_name(str(chat_id)):
        job.schedule_removal()

    # –©–æ–¥–Ω—è –æ 09:00 –∑–∞ TZ
    context.job_queue.run_daily(
        daily_job,
        time=time(hour=9, minute=0, tzinfo=TZ),
        name=str(chat_id),
    )
    await update.message.reply_text("‚úÖ –©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ —É–≤—ñ–º–∫–Ω–µ–Ω–∞ (—â–æ–¥–Ω—è –æ 09:00, Europe/Zurich).")


async def daily_off(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–∏–º–∫–Ω—É—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É —â–æ–¥–µ–Ω–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É."""
    chat_id = update.effective_chat.id
    removed = False
    for job in context.job_queue.get_jobs_by_name(str(chat_id)):
        job.schedule_removal()
        removed = True
    if chat_id in subscribers:
        subscribers.remove(chat_id)
    await update.message.reply_text("üõë –†–æ–∑—Å–∏–ª–∫—É –≤–∏–º–∫–Ω–µ–Ω–æ." if removed else "‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ –Ω–µ –±—É–ª–æ.")


# ================== –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø ==================
def main() -> None:
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token or not token.strip():
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω–æ TELEGRAM_BOT_TOKEN —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")

    app: Application = ApplicationBuilder().token(token.strip()).build()

    # –ö–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("predict", predict))
    app.add_handler(CommandHandler("rebuild", rebuild))
    app.add_handler(CommandHandler("daily_on", daily_on))
    app.add_handler(CommandHandler("daily_off", daily_off))

    # –ì–ª–æ–±–∞–ª—å–Ω–∞ —â–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ (—É—Å—ñ–º, —Ö—Ç–æ –≤ subscribers)
    app.job_queue.run_daily(
        daily_job,
        time=time(hour=9, minute=0, tzinfo=TZ),
        name="global_daily",
    )

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É—î –∫–æ–º–∞–Ω–¥–∏‚Ä¶")
    app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
